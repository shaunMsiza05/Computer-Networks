A few exercises so that the knowledge of socket programming is cemented.

1. Code the web application.

2. code a load balance for a distributed server architecture

3. Code a dns system, root, tld, and authoritaitive servers, then the web application should make requests to that dns system

4. Code static Nat, dynamic Nat, and easy IP

4. Code dhcp server side

5. code library for sockets

def searchForResourceRecord(resourceRecords):
    print(resourceRecords['A'])
    
def dnsResolver(domainName, type):

    resourceRecords = {
        "A": [
            ("web.amazon.com", "localhost", "A", 10),
            ("mail.amazon.com", "localhost", "A", 10),
            ("web.facebook.com", "localhost", "A", 10),
            ("mail.facebook.com", "localhost", "A", 10)
        ],
        "MX": [
             ("facebook.com", "mail.facebook.com", "MX", 10),
             ("amazon.com", "mail.amazon.com", "MX", 10)
        ],
        "CNAME": [
            ("facebook.com", "web.facebook.com", "CNAME", 10),
            ("amazon.com", "web.amazon.com", "CNAME", 10)
        ]
    }

    searchForResourceRecord(resourceRecords)

7. The basic challenge in the chat app is to relay the message through the server. Use port numbers to differentiate clients
8 after this build smtp